/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ww_elf_write_arch.template                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kiroussa <oss@xtrm.me>                     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/02/17 17:16:54 by kiroussa          #+#    #+#             */
/*   Updated: 2025/03/30 15:34:37 by kiroussa         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#define ELF_BITNESS 32
#include "ww_elf_write_arch.template"

#define ELF_BITNESS 64
#include "ww_elf_write_arch.template"

#ifndef ELF_BITNESS
# error "ELF_BITNESS not defined"
#endif

#define _APPEND(x, y) x##y
#define APPEND(x, y) _APPEND(x, y)

#define Elf(x) APPEND(APPEND(APPEND(Elf, ELF_BITNESS), _), x)
#define Func(x) APPEND(APPEND(x, _), ELF_BITNESS) 

static bool	Func(ww_elf_write_header)(int fd,
			Elf(Ehdr) *ehdr, size_t total_size)
{
	bool	err;

	if ((size_t)((char *)ehdr + sizeof(Elf(Ehdr))) > (size_t)((char *)ehdr + total_size))
	{
		err = true;
		ww_error("ww_elf_write_header: invalid EHDR\n");
		return (err);
	}
	err = (write(fd, ehdr, sizeof(Elf(Ehdr))) != sizeof(Elf(Ehdr)));
	if (err)
		ww_error("ww_elf_write_header: write failed: %m\n");
	return (err);
}

static bool	Func(ww_elf_write_program_headers)(
	__attribute__((unused)) t_ww_args *args,
	int fd,
	Elf(Ehdr) *ehdr,
	size_t total_size
) {
	Elf(Phdr)	*phdr;
	size_t		i;
	bool		err;
	char		*start;

	err = false;
	i = 0;
	start = (char *)ehdr + ehdr->e_phoff;
	while (i < ehdr->e_phnum && !err)
	{
		phdr = (Elf(Phdr) *)(start + i * ehdr->e_phentsize);
		ww_trace("writing program header %zu\n", i);
		if ((size_t)((char *)phdr + ehdr->e_phentsize) > (size_t)((char *)ehdr + total_size))
		{
			err = true;
			ww_error("ww_elf_write_program_headers: invalid PHDR\n");
			break ;
		}
		err = (write(fd, phdr, ehdr->e_phentsize) != ehdr->e_phentsize);
		if (err)
			ww_error("ww_elf_write_program_headers: write failed: %m\n");
		i++;
	}
	return (err);
}

static bool	Func(ww_elf_write_section_headers)(
	__attribute__((unused)) t_ww_args *args,
	int fd,
	Elf(Ehdr) *ehdr,
	size_t total_size
) {
	Elf(Shdr)	*shdr;
	size_t		i;
	bool		err;
	char		*start;

	(void) args;
	err = false;
	i = 0;
	start = (char *)ehdr + ehdr->e_shoff;
	while (i < ehdr->e_shnum && !err)
	{
		shdr = (Elf(Shdr) *)(start + i * ehdr->e_shentsize);
		ww_trace("writing section header %zu\n", i);
		if ((size_t)((char *)shdr + ehdr->e_shentsize) > (size_t)((char *)ehdr + total_size))
		{
			err = true;
			ww_error("ww_elf_write_section_headers: invalid SHDR\n");
			break ;
		}
		err = (write(fd, shdr, ehdr->e_shentsize) != ehdr->e_shentsize);
		if (err)
			ww_error("ww_elf_write_section_headers: write failed: %m\n");
		i++;
	}
	return (err);
}

static bool	Func(ww_elf_write_segments)(
	__attribute__((unused)) t_ww_args *args,
	int fd,
	Elf(Ehdr) *ehdr,
	size_t total_size
) {
	Elf(Phdr)	*phdr;
	size_t		i;
	bool		err;
	char		*start;

	err = false;
	i = 0;
	start = (char *)ehdr + ehdr->e_phoff;
	while (i < ehdr->e_phnum && !err)
	{
		phdr = (Elf(Phdr) *)(start + i * ehdr->e_phentsize);
		if (phdr->p_type == PT_LOAD)
		{
			ww_trace("writing segment %zu\n", i);
			if ((size_t)(phdr + ehdr->e_phentsize) > (size_t)((char *)ehdr + total_size))
			{
				err = true;
				ww_error("ww_elf_write_segments: invalid PHDR\n");
				break ;
			}
			err = (write(fd, phdr, ehdr->e_phentsize) != ehdr->e_phentsize);
			if (err)
				ww_error("ww_elf_write_segments: write failed: %m\n");
		}
		i++;
	}
	return (err);
}

bool	Func(ww_elf_write)(t_ww_args *args, int fd, Elf(Ehdr) *ehdr,
			size_t total_size)
{
	bool	err;

	err = Func(ww_elf_write_header)(fd, ehdr, total_size);
	if (!err)
		err |= Func(ww_elf_write_program_headers)(args, fd, ehdr, total_size);
	if (!err)
		err |= Func(ww_elf_write_section_headers)(args, fd, ehdr, total_size);
	if (!err)
		err |= Func(ww_elf_write_segments)(args, fd, ehdr, total_size);
	return (err);
}

#undef ELF_BITNESS

// vim: ft=c
