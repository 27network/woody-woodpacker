/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   elfstream_write.template                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kiroussa <oss@xtrm.me>                     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/17 12:14:40 by kiroussa          #+#    #+#             */
/*   Updated: 2025/06/19 17:20:18 by kiroussa         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <elfstream_macros.h>
#include <ft/mem.h>
#include <ft/print.h>
#include <limits.h>

enum e_elfstream_error
Func(elfstream_write_header)(t_elfstream *self, int fd)
{
	const ssize_t	to_write = sizeof(Elf(Ehdr));
	Elf(Ehdr)		*hdr;

	DBG("writing header");
	hdr = (Elf(Ehdr) *) &self->ehdr32;
	if (lseek(fd, 0, SEEK_SET) == -1)
		return (ELFSTREAM_IO);
	hdr->e_phnum = self->segment_count;
	hdr->e_shnum = self->section_count;
	//TODO: shstrndx
	if (write(fd, hdr, to_write) != to_write)
		return (ELFSTREAM_IO);
	DBG("wrote header");
	return (ELFSTREAM_OK);
}

FASTCALL enum e_elfstream_error
Func(elfstream_write_segment)(t_elf_segment *self, int fd)
{
	const ssize_t	to_write = sizeof(Elf(Phdr));
	Elf(Phdr)		*phdr = (Elf(Phdr) *) &self->phdr32;
	Elf(Ehdr)		*ehdr = (Elf(Ehdr) *) &self->stream->ehdr32;

	DBG("writing segment header");
	if (phdr->p_type == PT_PHDR)
	{
		DBG("(re)writing PT_PHDR segment");
		elfstream_content_free(self->content);
		self->content = NULL;
		phdr->p_filesz = ehdr->e_phentsize * self->stream->segment_count;
		phdr->p_memsz = phdr->p_filesz;
		DBG("new size: %#lx", phdr->p_filesz);
	}
	if (write(fd, phdr, to_write) != to_write)
		return (ELFSTREAM_IO);
	DBG("wrote segment header");
	return (ELFSTREAM_OK);
}

FASTCALL enum e_elfstream_error
Func(elfstream_write_content)(off_t offset, t_content_source *content, int fd)
{
	enum e_elfstream_error	error;

	DBG("seeking to %#lx", offset);
	lseek(fd, offset, SEEK_SET);
	DBG("writing content");
	error = ELFSTREAM_OK;
	while (content)
	{
		DBG("writing type %d", (int) content->type);
		if (content->size > 0)
			error = content->write_fn(content, fd);
		if (error)
			break;
		DBG("wrote %#lx content bytes", content->size);
		off_t res = lseek(fd, offset + content->size, SEEK_SET);
		DBG("seek result: %#lx", res);
		offset += content->size;
		content = content->next;
	}
	DBG("wrote content");
	return (error);
}

// Find the lowest segment in the stream and return its index
FASTCALL int
Func(elfstream_segment_lowest)(t_elf_segment *segments, size_t count)
{
	int			i;
	size_t		lowest;
	int			lowest_index;
	Elf(Phdr)	*tmp;

	lowest = SIZE_MAX;
	lowest_index = -1;
	DBG("looking for lowest segment");
	i = 0;
	while (i < (int) count)
	{
		tmp = (Elf(Phdr) *) &segments[i].phdr32;
		if (tmp->p_offset == ((Elf(Off)) -1))
		{
			i++;
			continue;
		}
		DBG("segment %zu: offset %#lx, size: %#lx", i, tmp->p_offset, tmp->p_filesz);
		if (tmp->p_offset < lowest)
		{
			DBG("lowest now!");
			lowest = tmp->p_offset;
			lowest_index = i;
		}
		i++;
	}
	DBG("lowest segment is %d", lowest_index);
	return (lowest_index);
}

FASTCALL void
Func(elfstream_segment_coerce)(t_elf_segment *segment, size_t bound)
{
	Elf(Phdr)			*phdr;
	size_t				difference;
	t_content_source	*tmp;

	phdr = (Elf(Phdr) *) &segment->phdr32;
	if (phdr->p_offset < bound)
	{
		DBG("shrinking to hold in bound %#lx", bound);
		difference = bound - phdr->p_offset;
		phdr->p_offset += difference;
		if (phdr->p_filesz < difference)
			phdr->p_filesz = 0;
		else
			phdr->p_filesz -= difference;
		if (phdr->p_memsz < difference)
			phdr->p_memsz = 0;
		else
			phdr->p_memsz -= difference;
		tmp = segment->content;
		while (tmp)
		{
			if (difference >= tmp->size)
			{
				DBG("removing content source as its too small (%#lx)", tmp->size);
				tmp->size = 0;
				difference -= tmp->size;
			}
			else
			{
				DBG("shrinking content source by %#lx", difference);
				if (tmp->type == CONTENT_SOURCE_FILE)
					tmp->s_file.offset += difference;
				tmp->size -= difference;
				difference = 0;
			}
			tmp = tmp->next;
		}
		DBG("new segment size: %#lx", phdr->p_filesz);
	}
}

FASTCALL enum e_elfstream_error
Func(elfstream_write_segments_round)(t_elfstream *self, int fd)
{
	size_t			small_bound;
	t_elf_segment	*segment;
	size_t			i;
	int				smallest;
	Elf(Off)		*offset;

	small_bound = sizeof(Elf(Ehdr)) + (self->segment_count * sizeof(Elf(Phdr)));
	i = 0;
	smallest = INT_MAX;
	while (i < self->segment_count)
	{
		DBG("writing segment pass #%zu", i);
		smallest = Func(elfstream_segment_lowest)(self->segments, self->segment_count);
		if (smallest < 0)
		{
			ft_dprintf(2, "error: lowest segment is not in bounds\n");
			break ; // TODO: error?
		}
		DBG("coercing segment #%zu", smallest);
		Func(elfstream_segment_coerce)(self->segments + smallest, small_bound);
		DBG("writing segment #%zu", smallest);
		segment = &self->segments[smallest];
		offset = &((Elf(Phdr) *) &segment->phdr32)->p_offset;
		Func(elfstream_write_content)(*offset, segment->content, fd);
		DBG("wrote segment content at %#lx", *offset);
		i++;
		DBG("written %zu/%zu segments", i, self->segment_count);
		small_bound = *offset + elfstream_content_size(segment->content);
		*offset = ((Elf(Off)) -1);
		// fsync(fd);
		// getchar();
	}
	return (ELFSTREAM_OK);
}

enum e_elfstream_error
Func(elfstream_write_segments)(t_elfstream *self, int fd)
{
	t_elf_segment			*segments;
	size_t					i;
	const Elf(Ehdr)			*hdr = (Elf(Ehdr) *) &self->ehdr32;
	enum e_elfstream_error	error;

	lseek(fd, hdr->e_phoff, SEEK_SET);
	DBG("writing segments at %#lx", hdr->e_phoff);
	segments = self->segments;
	i = 0;
	error = ELFSTREAM_OK;
	while (i < self->segment_count && !error)
	{
		DBG("writing segment header %zu/%zu", i + 1, self->segment_count);
		error = Func(elfstream_write_segment)(segments + i, fd);
		// fsync(fd);
		DBG("wrote segment header %zu", i + 1);
		// getchar();
		i++;
	}
	if (!error)
		error = Func(elfstream_write_segments_round)(self, fd);
	DBG("wrote segments (error? %d)", (int) error);
	return (error);
}

FASTCALL int
Func(elfstream_section_lowest)(t_elf_section *sections, size_t count)
{
	int			i;
	size_t		lowest;
	int			lowest_index;
	Elf(Shdr)	*tmp;

	lowest = SIZE_MAX;
	lowest_index = -1;
	DBG("looking for lowest section");
	i = 0;
	while (i < (int) count)
	{
		tmp = (Elf(Shdr) *) &sections[i].shdr32;
		if (tmp->sh_offset == ((Elf(Off)) -1))
		{
			i++;
			continue;
		}
		DBG("section %zu: offset %#lx, size: %#lx", i, tmp->sh_offset, tmp->sh_size);
		if (tmp->sh_offset < lowest)
		{
			DBG("lowest now!");
			lowest = tmp->sh_offset;
			lowest_index = i;
		}
		i++;
	}
	DBG("lowest section is %d", lowest_index);
	return (lowest_index);
}

FASTCALL void
Func(elfstream_section_coerce)(t_elf_section *section, size_t bound)
{
	Elf(Shdr)			*shdr;
	size_t				difference;
	t_content_source	*tmp;

	shdr = (Elf(Shdr) *) &section->shdr32;
	if (shdr->sh_offset < bound)
	{
		DBG("shrinking to hold in bound %#lx", bound);
		difference = bound - shdr->sh_offset;
		shdr->sh_offset += difference;
		if (shdr->sh_size < difference)
			shdr->sh_size = 0;
		else
			shdr->sh_size -= difference;
		tmp = section->content;
		while (tmp)
		{
			if (difference >= tmp->size)
			{
				DBG("removing content source as its too small (%#lx)", tmp->size);
				tmp->size = 0;
				difference -= tmp->size;
			}
			else
			{
				DBG("shrinking content source by %#lx", difference);
				if (tmp->type == CONTENT_SOURCE_FILE)
					tmp->s_file.offset += difference;
				tmp->size -= difference;
				difference = 0;
			}
			tmp = tmp->next;
		}
		DBG("new section size: %#lx", shdr->sh_size);
	}
}

FASTCALL enum e_elfstream_error
Func(elfstream_write_section_round)(t_elfstream *self, int fd, size_t small_bound)
{
	t_elf_section	*section;
	size_t			i;
	int				smallest;
	Elf(Off)		*offset;

	i = 0;
	smallest = INT_MAX;
	while (i < self->section_count)
	{
		smallest = Func(elfstream_section_lowest)(self->sections, self->section_count);
		if (smallest < 0)
		{
			ft_dprintf(2, "error: lowest section is not in bounds\n");
			break ; // TODO: error?
		}
		DBG("coercing section #%zu", smallest);
		Func(elfstream_section_coerce)(self->sections + smallest, small_bound);
		DBG("writing section #%zu", smallest);
		section = &self->sections[smallest];
		offset = &((Elf(Shdr) *) &section->shdr32)->sh_offset;
		Func(elfstream_write_content)(*offset, section->content, fd);
		DBG("wrote section content at %#lx", *offset);
		i++;
		DBG("written %zu/%zu sections", i, self->section_count);
		small_bound = *offset + elfstream_content_size(section->content);
		*offset = ((Elf(Off)) -1);
	}
	return (ELFSTREAM_OK);
}

FASTCALL enum e_elfstream_error
Func(elfstream_write_section)(t_elf_section *self, int fd)
{
	const ssize_t			to_write = sizeof(Elf(Shdr));
	Elf(Shdr)				*shdr = (Elf(Shdr) *) &self->shdr32;

	//TODO: fix sizes
	DBG("writing section header");
	DBG("sh_name (index): %d", shdr->sh_name);
	DBG("sh_type: %d", shdr->sh_type);
	DBG("sh_offset: %#lx", shdr->sh_offset);
	DBG("sh_size: %#lx", shdr->sh_size);
	DBG("sh_entsize: %#lx", shdr->sh_entsize);
	if (write(fd, shdr, to_write) != to_write)
		return (ELFSTREAM_IO);
	DBG("wrote section header");
	return (ELFSTREAM_OK);
}

enum e_elfstream_error
Func(elfstream_write_sections)(t_elfstream *self, int fd)
{
	size_t					i;
	const Elf(Ehdr)			*hdr = (Elf(Ehdr) *) &self->ehdr32;
	enum e_elfstream_error	error;
	t_elf_section			*sections;

	DBG("writing sections at %#lx", hdr->e_shoff);
	sections = ft_calloc(self->section_count, sizeof(t_elf_section));
	if (!sections)
		return (ELFSTREAM_ALLOC);
	ft_memcpy(sections, self->sections, self->section_count * sizeof(t_elf_section));
	DBG("writing segment content rounds");
	off_t lower_bound = lseek(fd, 0, SEEK_CUR);
	error = Func(elfstream_write_section_round)(self, fd, lower_bound);
	ft_memcpy(self->sections, sections, self->section_count * sizeof(t_elf_section));
	free(sections);
	i = 0;
	lseek(fd, hdr->e_shoff, SEEK_SET);
	while (i < self->section_count && !error)
	{
		DBG("writing section header %zu", i);
		error = Func(elfstream_write_section)(self->sections + i, fd);
		DBG("wrote section header %zu", i);
		i++;
	}
	DBG("wrote sections (error? %d)", (int) error);
	return (error);
}

#undef ELF_BITNESS

// vim: set ft=c:
